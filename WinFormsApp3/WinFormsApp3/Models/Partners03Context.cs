// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WinFormsApp3.Models;

public partial class Partners03Context : DbContext
{
    private static Partners03Context context;

    public static Partners03Context Instance()
    {
        if (context == null)
            context = new Partners03Context();
        return context;
    }

    public Partners03Context()
    {
    }

    public Partners03Context(DbContextOptions<Partners03Context> options)
        : base(options)
    {
    }

    public virtual DbSet<MaterialType> MaterialTypes { get; set; }

    public virtual DbSet<Partner> Partners { get; set; }

    public virtual DbSet<PartnerType> PartnerTypes { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductMaterialType> ProductMaterialTypes { get; set; }

    public virtual DbSet<ProductType> ProductTypes { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-5DMTEJJQ;Initial Catalog=Partners03;Integrated Security=True;Encrypt=True;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MaterialType>(entity =>
        {
            entity.ToTable("MaterialType$");

            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<Partner>(entity =>
        {
            entity.ToTable("Partner$");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Director)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Inn).HasColumnName("INN");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.PartnerType).WithMany(p => p.Partners)
                .HasForeignKey(d => d.PartnerTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Partner$_PartnerType$");
        });

        modelBuilder.Entity<PartnerType>(entity =>
        {
            entity.ToTable("PartnerType$");

            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.ToTable("Product$");

            entity.Property(e => e.НаименованиеПродукции)
                .HasMaxLength(255)
                .HasColumnName("Наименование продукции");

            entity.HasOne(d => d.ProductType).WithMany(p => p.Products)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("FK_Product$_ProductType$");
        });

        modelBuilder.Entity<ProductMaterialType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Product_MaterialType$_1");

            entity.ToTable("Product_MaterialType$");

            entity.HasOne(d => d.MaterialType).WithMany(p => p.ProductMaterialTypes)
                .HasForeignKey(d => d.MaterialTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_MaterialType$_MaterialType$");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductMaterialTypes)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_MaterialType$_Product$");
        });

        modelBuilder.Entity<ProductType>(entity =>
        {
            entity.ToTable("ProductType$");

            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.ToTable("Sales$");

            entity.Property(e => e.SalesDate).HasColumnType("datetime");

            entity.HasOne(d => d.Partner).WithMany(p => p.Sales)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("FK_Sales$_Partner$");

            entity.HasOne(d => d.Product).WithMany(p => p.Sales)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Sales$_Product$");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}